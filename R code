cesro <- dummy.data.frame(cesro, names=c("impact_time_frame"), sep="_")
cesro <- dummy.data.frame(cesro, names=c("motivation"), sep="_")
cesro <- dummy.data.frame(cesro, names=c("denied_not_applied"), sep="_")
cesro <- dummy.data.frame(cesro, names=c("card_type"), sep="_")
cesro <- dummy.data.frame(cesro, names=c("why_denied_credit"), sep="_")
y= as.data.frame(unique(cesro[,c('channel','OriginalAssignedSegmentNumber')] %>%
  group_by(channel,OriginalAssignedSegmentNumber ) %>%
  mutate(count = n())))

cesro=merge(cesro, y, by=c("channel","OriginalAssignedSegmentNumber"))

cesro$channel=NULL


#imputing missing values

colnames(cesro)[apply(is.na(cesro), 2, any)]

#visualization of missing values

library(VIM)
aggr_plot <- aggr(cesro, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))

#imputation 
str(cesro$total_civil_claims)
colnames(cesro)


tempData <- mice(cesro[,c(3,12,31,69,41:94)],m=1,maxit=50,meth='pmm',seed=500)

completedData <- complete(tempData,1)
 imputedcesro<-cbind(cesro,completedData)
 cesro =imputedcesro[,-c(3,12,31,69,41:94)]

############################################################################################################################################

library(randomForest)
library(mlbench)
library(caret)
library(e1071)

# load dataset
data(Sonar)

dataset <- Sonar
x <- dataset[,1:60]   # predictors
y <- dataset[,61]     # labels

# Create model with default paramters
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(Class ~ ., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_default)

# 1 - Tune using 'caret' package
# Random Search
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="random")
set.seed(seed)
mtry <- sqrt(ncol(x))
rf_random <- train(Class ~ ., data=dataset, method="rf", metric=metric, tuneLength=15, trControl=control)
print(rf_random)
plot(rf_random)

# Grid Search
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
set.seed(seed)
tunegrid <- expand.grid(.mtry=c(1:15))
rf_gridsearch <- train(Class ~ ., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_gridsearch)
plot(rf_gridsearch)

# 2 - Tune using algorithm tools
# Algorithm Tune (tuneRF)
set.seed(seed)
bestmtry <- tuneRF(x, y, stepFactor=1.5, improve=1e-5, ntree=500)
print(bestmtry)

# 3 - Tune using own paramaters search
# Tune Manually

control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(sqrt(ncol(x))))
modellist <- list()
for (ntree in c(1000, 1500, 2000, 2500)) {
  set.seed(seed)
  fit <- train(Class ~ ., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control, ntree=ntree)
  key <- toString(ntree)
  modellist[[key]] <- fit
}
# compare results
results <- resamples(modellist)
summary(results)
dotplot(results)

# Extend Caret
customRF <- list(type = "Classification", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
  randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
  predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
  predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes

# train model
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(seed)
custom <- train(Class ~ ., data=dataset, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
summary(custom)
plot(custom)
